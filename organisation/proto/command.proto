syntax = "proto3";

package command;

service OrganisationDev {
  /// create s a new peerset with a set of peers.
  rpc CreatePeerset (CreatePeersetRequest) returns (CreatePeersetResponse) {}

  // notify peer that a new peerset has been created,
  rpc PeersetCreated (PeersetCreatedRequest) returns (PeersetCreatedResponse) {}

  // triggers process of proposing a change to the permission graph.
  rpc ProposeChange (ProposeChangeRequest) returns (ProposeChangeResponse) {}

  // triggers process of proposing a cross-peerset change.
  rpc ProposeCrossPeersetChange (ProposeCrossPeersetChangeRequest) returns (ProposeCrossPeersetChangeResponse) {}

  // verification: just read the graph
  rpc QueryPeersetsCID (QueryPeersetsCIDsRequest) returns (QueryPeersetsCIDsResponse) {}
}

message QueryPeersetsCIDsRequest { }

message QueryPeersetsCIDsResponse {
  repeated PeersetGraph peerset_graphs = 1;
}

message PeersetGraph {
  string peerset_address = 1;
  string permission_graph_cid = 2;
}

/*
19.04.2023

Next meeting Wednesday 15:00


- Since last meeting I've added IPFS
- Been working on creating benchmarks for proposing transactions parametrised by number of peers,
  but haven't finished it yet.
  For some reason after a couple of transactions, new transactions aren't accepted and peers just sit waiting for something.
  Idk maybe:
    - some events were lost somehow?
    - maybe transactions that peers have sent failed, but peers haven't realised it.


# todo: in order to make this local benchmark reliably we'd have to switch to miniing a block once every 10-15s.
# currently a block is included right after a transaction is submitted.




Two articles:
- https://www.mdpi.com/2079-9292/12/6/1283#B25-electronics-12-01283 - blockchain + IPFS
- DOI: 10.1109/BRAINS52497.2021.9569804




Questions:
- blockchain consts - compare with the article above,
- performance comparison.


Conclusions:
- is this enough.


Consider test platform.



------
Charts showing:
- estimated costs for each transaction:
- how long it takes for a transaction to succeed,
- throughput

Two scenarios:
- single peerset
- cross-peerset (two peersets)

Parametrized by number of peers (3, 5, 7, 10, 20, 40, ...)

Environment:
- local?
- testnet? - let's try it and see what sort of problems we might run into.


Question:
- could we skip implementation of verification,

Next Wednesday 13:00/14:00,
Discuss master's thesis text with professor.
 */


/// Next steps:
/// 1.E2E
/// crate an integration test that runs multiple peers

/// 2. IPFS
/// - this should be (relatively) easy

/// 3. Atomic Commitment
/// - complete atomic commitment.
/// SC per each change
/// if we decide to use a single peerset smart contract
/// what are cons of using single smart contract per peerset
/// vs smart contract per each cross-peerset change.


/// Conference paper
/// 20.05 deadline for conference paper
/// 29.09


/// Step 0.
/// Prepare a script that runs two peers in different panes on tmux, should be helpful.

/// Let's start with creating a script that runs

/// First step (Wednesday)
/// 1. create peerset:
///     - coordinator: selects one peer to create peerset smart contract
///     - peer: deploys smart contract with a set of peers
//      - coordinator: sends events to peers that they're now part of a given peerset
///     - each peer: subscribes to peerset smart contract
/// 2. propose a change,
/// 3. verify that a change has been applied and all peers see a new graph:
///   - just read the graph or its version from every peer and make sure that they see the same thing.

/// todo:
/// - vote for a change and finish RPC after voting.. Done!
/// - for now one has to first deploy oracle smart contract (remove it!) Done!
/// - decide whether we want to keep the oracle for registering peersets or not.

///
/// - cleanup the code, otherwise it's going to be a mess.
/// - implement IPFS


// Important part: connect to blockchain and listen to events.
// IPFS: not so important, skip that if necessary!

// Impl Detail:
// - how do peers find that they've been asked to be part of a given peerset?
// - another smart-contract which they need to monitor?
// - (TODO: for now just send an event that a peerset has been created)


/// Future work:
/// Answering DAC queries:
/// - bottom line: model should be as scrappy as possible but we need that for verification!

/// Peerset creation details:
/// - every peer needs to agree to be part of a given peerset, before creating a peerset.

/// Q: voting part
/// Just say yes to all changes (skip verification for now)


message CreatePeersetRequest {
  string name = 1;
  repeated string peers = 2;
  PermissionGraph initial_permission_graph = 3;
}

message CreatePeersetResponse {
  string cid = 1;
  string deployed_peerset_smart_contract_address = 2;
}



message PeersetCreatedRequest {
  string deployed_peerset_smart_contract_address = 1;
  string permission_graph_cid = 2;
  repeated string peers = 3;
}

message PeersetCreatedResponse {}


message ProposeChangeRequest {
  string peerset_address = 1;
  PermissionGraph new_permission_graph = 2;
}

message ProposeCrossPeersetChangeRequest {
  string peerset_address = 1;
  PermissionGraph new_permission_graph = 2;
  string other_peerset_address = 3;
  PermissionGraph other_permission_graph = 4;
}

message ProposeCrossPeersetChangeResponse {
  string proposed_cid = 1;
  string other_proposed_cid = 2;
  bool accepted = 3;
}

message ProposeChangeResponse {
  string proposed_cid = 1;
  bool accepted = 2;
}


message PermissionGraph {
  map<string, Edges> edges = 1;
}

message Edges {
  Node source = 1;
  repeated Edge edges = 2;
}

message Node {
  string id = 1;
  NodeType type = 2;
  // needed for entities managed by different peersets.
  optional string peerset_address = 3;
}

enum NodeType {
  USER = 0;
  GROUP = 1;
  ASSET = 2;
}

message Edge {
  string destination_node_id = 1;
  // todo: this should probably be something more sophisticated for now let's just make it a string.
  string permission = 2;
}
