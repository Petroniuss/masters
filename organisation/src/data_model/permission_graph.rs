use petgraph::dot::{Config, Dot};
use petgraph::Graph;

pub(crate) type PermissionGraph = Graph<PNode, Permission>;

/// TLDR Enum representing a node in a permission graph.
#[derive(Debug, Clone, PartialEq, Eq)]
#[allow(dead_code)]
pub(crate) enum PNode {
    /// TLDR it's a user that belongs to a specific organisation.
    User(User),
    /// TLDR it's a set of users.
    Group(Group),
    /// TLDR it's a collection of files.
    Space(Space),
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub(crate) struct User {
    pub(crate) user_id: String,
    pub(crate) organisation: String,
    pub(crate) name: Option<String>,
    pub(crate) email: Option<String>,
    /// todo: we need to add a signature here to verify that the user is actually from this organisation.
    /// this signature needs to be generated by the organisation's private key
    /// and so nodes in the system need a way to find organisation's public key and its url or sth
    /// this info could be on the blockchain.
    pub(crate) signature: Option<String>,
}

// todo: how to add a user to a group?
#[derive(Debug, Clone, PartialEq, Eq)]
pub(crate) struct Group {
    pub(crate) group_id: String,
    pub(crate) organisation: String,
    pub(crate) name: Option<String>,
    pub(crate) signature: Option<String>,
}

// todo edges also need to be signed by the organisation or by the user?
#[derive(Debug, Clone, PartialEq, Eq)]
#[allow(dead_code)]
pub(crate) enum Permission {
    /// TLDR - Read/Write/Execute permissions - had to start with something :)
    SimpleRWX(RWX),
}

// todo: signature format: from node to node by organisation&user?.
#[derive(Debug, Clone, PartialEq, Eq)]
pub(crate) struct RWX {
    pub(crate) read: bool,
    pub(crate) write: bool,
    pub(crate) execute: bool,
    pub(crate) organisation: String,
    pub(crate) signature: Option<String>,
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub(crate) struct Space {
    pub(crate) space_id: String,
    pub(crate) organisation: String,
    pub(crate) name: Option<String>,
    pub(crate) signature: Option<String>,
}

/// TLDR - this is just to visualize the graph.
trait PermissionGraphVis {
    fn to_dot<'a>(&'a self) -> Dot<'a, &PermissionGraph>;
}

impl PermissionGraphVis for PermissionGraph {
    fn to_dot<'a>(&'a self) -> Dot<'a, &PermissionGraph> {
        to_dot(self)
    }
}

fn to_dot<'a>(
    permission_graph: &'a PermissionGraph,
) -> Dot<'a, &PermissionGraph> {
    Dot::with_config(&permission_graph, &[Config::EdgeNoLabel])
}

#[cfg(test)]
mod tests {
    use crate::permission_graph::*;
    use log::info;
    use test_log::test;

    // #[test]
    // fn example_2() {
    //     assert_eq!(true, false);
    // }

    #[test]
    fn example_test() {
        let mut g = PermissionGraph::new();

        let org1 = "ORG_1";

        let user_idx = g.add_node(PNode::User(User {
            user_id: "UR_1".to_string(),
            organisation: org1.to_string(),
            name: Some("Ala W.".to_string()),
            email: None,
            signature: None,
        }));

        let group_idx = g.add_node(PNode::Group(Group {
            group_id: "GR_1".to_string(),
            organisation: org1.to_string(),
            name: Some("".to_string()),
            signature: None,
        }));

        let space_idx = g.add_node(PNode::Space(Space {
            space_id: "SP_1".to_string(),
            organisation: org1.to_string(),
            name: Some("Space One - SP_1".to_string()),
            signature: None,
        }));

        g.add_edge(
            user_idx,
            group_idx,
            Permission::SimpleRWX(RWX {
                read: true,
                write: true,
                execute: true,
                organisation: org1.to_string(),
                signature: None,
            }),
        );

        g.add_edge(
            group_idx,
            space_idx,
            Permission::SimpleRWX(RWX {
                read: true,
                write: true,
                execute: true,
                organisation: org1.to_string(),
                signature: None,
            }),
        );

        info!("{:?}", g.to_dot());
    }
}
