pub use permission_graph::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod permission_graph {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"organisationName\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"_PermissionGraphIPFSPointer\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PermissionGraphChangeRequest\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"organisationName\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"PermissionGraphIPFSPointer\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PermissionGraphUpdated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"PermissionGraphIPFSPointer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getLatestPermissionGraphIPFSPointer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"organisationName\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"_PermissionGraphIPFSPointer\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"proposePermissionGraphChange\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static PERMISSIONGRAPH_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        144,
        145,
        82,
        96,
        0,
        128,
        130,
        82,
        144,
        97,
        0,
        44,
        144,
        130,
        97,
        0,
        209,
        86,
        91,
        80,
        97,
        1,
        144,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        0,
        92,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        0,
        124,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        0,
        204,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        0,
        169,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        0,
        200,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        0,
        181,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        64,
        27,
        3,
        129,
        17,
        21,
        97,
        0,
        234,
        87,
        97,
        0,
        234,
        97,
        0,
        50,
        86,
        91,
        97,
        0,
        254,
        129,
        97,
        0,
        248,
        132,
        84,
        97,
        0,
        72,
        86,
        91,
        132,
        97,
        0,
        130,
        86,
        91,
        96,
        32,
        128,
        96,
        31,
        131,
        17,
        96,
        1,
        129,
        20,
        97,
        1,
        51,
        87,
        96,
        0,
        132,
        21,
        97,
        1,
        27,
        87,
        80,
        133,
        131,
        1,
        81,
        91,
        96,
        0,
        25,
        96,
        3,
        134,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        133,
        144,
        27,
        23,
        133,
        85,
        97,
        0,
        200,
        86,
        91,
        96,
        0,
        133,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        25,
        134,
        22,
        145,
        91,
        130,
        129,
        16,
        21,
        97,
        1,
        98,
        87,
        136,
        134,
        1,
        81,
        130,
        85,
        148,
        132,
        1,
        148,
        96,
        1,
        144,
        145,
        1,
        144,
        132,
        1,
        97,
        1,
        67,
        86,
        91,
        80,
        133,
        130,
        16,
        21,
        97,
        1,
        128,
        87,
        135,
        133,
        1,
        81,
        96,
        0,
        25,
        96,
        3,
        136,
        144,
        27,
        96,
        248,
        22,
        28,
        25,
        22,
        129,
        85,
        91,
        80,
        80,
        80,
        80,
        80,
        96,
        1,
        144,
        129,
        27,
        1,
        144,
        85,
        80,
        86,
        91,
        97,
        5,
        191,
        128,
        97,
        1,
        159,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        32,
        117,
        87,
        113,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        159,
        159,
        225,
        186,
        20,
        97,
        0,
        100,
        87,
        128,
        99,
        236,
        170,
        19,
        63,
        20,
        97,
        0,
        121,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        145,
        144,
        97,
        2,
        46,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        119,
        97,
        0,
        114,
        54,
        96,
        4,
        97,
        2,
        197,
        86,
        91,
        97,
        1,
        19,
        86,
        91,
        0,
        91,
        97,
        0,
        78,
        97,
        1,
        160,
        86,
        91,
        96,
        96,
        96,
        0,
        128,
        84,
        97,
        0,
        144,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        0,
        188,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        21,
        97,
        1,
        9,
        87,
        128,
        96,
        31,
        16,
        97,
        0,
        222,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        1,
        9,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        0,
        236,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        127,
        182,
        12,
        240,
        204,
        43,
        95,
        53,
        188,
        135,
        124,
        198,
        198,
        4,
        236,
        158,
        89,
        108,
        196,
        185,
        239,
        162,
        13,
        83,
        76,
        139,
        79,
        214,
        226,
        124,
        70,
        140,
        88,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        1,
        72,
        148,
        147,
        146,
        145,
        144,
        97,
        3,
        148,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        0,
        97,
        1,
        93,
        130,
        132,
        131,
        97,
        4,
        43,
        86,
        91,
        80,
        127,
        37,
        36,
        123,
        5,
        60,
        158,
        121,
        25,
        205,
        130,
        57,
        243,
        223,
        105,
        18,
        252,
        164,
        65,
        245,
        14,
        206,
        232,
        54,
        244,
        130,
        117,
        3,
        240,
        52,
        67,
        106,
        63,
        132,
        132,
        96,
        0,
        96,
        64,
        81,
        97,
        1,
        146,
        147,
        146,
        145,
        144,
        97,
        4,
        236,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        97,
        1,
        173,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        1,
        217,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        21,
        97,
        2,
        38,
        87,
        128,
        96,
        31,
        16,
        97,
        1,
        251,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        2,
        38,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        2,
        9,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        91,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        2,
        63,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        2,
        142,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        166,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        255,
        136,
        131,
        137,
        1,
        97,
        2,
        124,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        24,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        37,
        135,
        130,
        136,
        1,
        97,
        2,
        124,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        3,
        69,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        3,
        101,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        130,
        130,
        1,
        96,
        32,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        144,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        3,
        168,
        96,
        64,
        131,
        1,
        134,
        136,
        97,
        3,
        107,
        86,
        91,
        130,
        129,
        3,
        96,
        32,
        132,
        1,
        82,
        97,
        3,
        187,
        129,
        133,
        135,
        97,
        3,
        107,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        4,
        38,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        4,
        3,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        4,
        34,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        4,
        15,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        17,
        21,
        97,
        4,
        67,
        87,
        97,
        4,
        67,
        97,
        3,
        198,
        86,
        91,
        97,
        4,
        87,
        131,
        97,
        4,
        81,
        131,
        84,
        97,
        3,
        49,
        86,
        91,
        131,
        97,
        3,
        220,
        86,
        91,
        96,
        0,
        96,
        31,
        132,
        17,
        96,
        1,
        129,
        20,
        97,
        4,
        139,
        87,
        96,
        0,
        133,
        21,
        97,
        4,
        115,
        87,
        80,
        131,
        130,
        1,
        53,
        91,
        96,
        0,
        25,
        96,
        3,
        135,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        134,
        144,
        27,
        23,
        131,
        85,
        97,
        4,
        229,
        86,
        91,
        96,
        0,
        131,
        129,
        82,
        96,
        32,
        144,
        32,
        96,
        31,
        25,
        134,
        22,
        144,
        131,
        91,
        130,
        129,
        16,
        21,
        97,
        4,
        188,
        87,
        134,
        133,
        1,
        53,
        130,
        85,
        96,
        32,
        148,
        133,
        1,
        148,
        96,
        1,
        144,
        146,
        1,
        145,
        1,
        97,
        4,
        156,
        86,
        91,
        80,
        134,
        130,
        16,
        21,
        97,
        4,
        217,
        87,
        96,
        0,
        25,
        96,
        248,
        136,
        96,
        3,
        27,
        22,
        28,
        25,
        132,
        135,
        1,
        53,
        22,
        129,
        85,
        91,
        80,
        80,
        96,
        1,
        133,
        96,
        1,
        27,
        1,
        131,
        85,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        5,
        0,
        96,
        64,
        131,
        1,
        133,
        135,
        97,
        3,
        107,
        86,
        91,
        96,
        32,
        131,
        130,
        3,
        129,
        133,
        1,
        82,
        96,
        0,
        133,
        84,
        97,
        5,
        22,
        129,
        97,
        3,
        49,
        86,
        91,
        128,
        133,
        82,
        96,
        1,
        130,
        129,
        22,
        128,
        21,
        97,
        5,
        49,
        87,
        96,
        1,
        129,
        20,
        97,
        5,
        75,
        87,
        97,
        5,
        121,
        86,
        91,
        96,
        255,
        25,
        132,
        22,
        135,
        135,
        1,
        82,
        130,
        21,
        21,
        96,
        5,
        27,
        135,
        1,
        134,
        1,
        148,
        80,
        97,
        5,
        121,
        86,
        91,
        137,
        96,
        0,
        82,
        133,
        96,
        0,
        32,
        96,
        0,
        91,
        132,
        129,
        16,
        21,
        97,
        5,
        113,
        87,
        129,
        84,
        137,
        130,
        1,
        137,
        1,
        82,
        144,
        131,
        1,
        144,
        135,
        1,
        97,
        5,
        86,
        86,
        91,
        136,
        1,
        135,
        1,
        149,
        80,
        80,
        91,
        80,
        146,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        141,
        219,
        211,
        206,
        255,
        44,
        19,
        70,
        181,
        209,
        195,
        164,
        10,
        139,
        154,
        180,
        243,
        159,
        164,
        214,
        29,
        227,
        205,
        24,
        198,
        20,
        220,
        155,
        91,
        44,
        83,
        179,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static PERMISSIONGRAPH_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        32,
        117,
        87,
        113,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        159,
        159,
        225,
        186,
        20,
        97,
        0,
        100,
        87,
        128,
        99,
        236,
        170,
        19,
        63,
        20,
        97,
        0,
        121,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        78,
        97,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        91,
        145,
        144,
        97,
        2,
        46,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        119,
        97,
        0,
        114,
        54,
        96,
        4,
        97,
        2,
        197,
        86,
        91,
        97,
        1,
        19,
        86,
        91,
        0,
        91,
        97,
        0,
        78,
        97,
        1,
        160,
        86,
        91,
        96,
        96,
        96,
        0,
        128,
        84,
        97,
        0,
        144,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        0,
        188,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        21,
        97,
        1,
        9,
        87,
        128,
        96,
        31,
        16,
        97,
        0,
        222,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        1,
        9,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        0,
        236,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        144,
        86,
        91,
        127,
        182,
        12,
        240,
        204,
        43,
        95,
        53,
        188,
        135,
        124,
        198,
        198,
        4,
        236,
        158,
        89,
        108,
        196,
        185,
        239,
        162,
        13,
        83,
        76,
        139,
        79,
        214,
        226,
        124,
        70,
        140,
        88,
        132,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        1,
        72,
        148,
        147,
        146,
        145,
        144,
        97,
        3,
        148,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        0,
        97,
        1,
        93,
        130,
        132,
        131,
        97,
        4,
        43,
        86,
        91,
        80,
        127,
        37,
        36,
        123,
        5,
        60,
        158,
        121,
        25,
        205,
        130,
        57,
        243,
        223,
        105,
        18,
        252,
        164,
        65,
        245,
        14,
        206,
        232,
        54,
        244,
        130,
        117,
        3,
        240,
        52,
        67,
        106,
        63,
        132,
        132,
        96,
        0,
        96,
        64,
        81,
        97,
        1,
        146,
        147,
        146,
        145,
        144,
        97,
        4,
        236,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        97,
        1,
        173,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        1,
        217,
        144,
        97,
        3,
        49,
        86,
        91,
        128,
        21,
        97,
        2,
        38,
        87,
        128,
        96,
        31,
        16,
        97,
        1,
        251,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        2,
        38,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        2,
        9,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        86,
        91,
        96,
        0,
        96,
        32,
        128,
        131,
        82,
        131,
        81,
        128,
        130,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        2,
        91,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        2,
        63,
        86,
        91,
        80,
        96,
        0,
        96,
        64,
        130,
        134,
        1,
        1,
        82,
        96,
        64,
        96,
        31,
        25,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        146,
        80,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        2,
        142,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        166,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        2,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        219,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        255,
        136,
        131,
        137,
        1,
        97,
        2,
        124,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        3,
        24,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        37,
        135,
        130,
        136,
        1,
        97,
        2,
        124,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        3,
        69,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        3,
        101,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        130,
        130,
        1,
        96,
        32,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        145,
        1,
        96,
        31,
        25,
        22,
        144,
        145,
        1,
        1,
        144,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        3,
        168,
        96,
        64,
        131,
        1,
        134,
        136,
        97,
        3,
        107,
        86,
        91,
        130,
        129,
        3,
        96,
        32,
        132,
        1,
        82,
        97,
        3,
        187,
        129,
        133,
        135,
        97,
        3,
        107,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        4,
        38,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        4,
        3,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        4,
        34,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        4,
        15,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        17,
        21,
        97,
        4,
        67,
        87,
        97,
        4,
        67,
        97,
        3,
        198,
        86,
        91,
        97,
        4,
        87,
        131,
        97,
        4,
        81,
        131,
        84,
        97,
        3,
        49,
        86,
        91,
        131,
        97,
        3,
        220,
        86,
        91,
        96,
        0,
        96,
        31,
        132,
        17,
        96,
        1,
        129,
        20,
        97,
        4,
        139,
        87,
        96,
        0,
        133,
        21,
        97,
        4,
        115,
        87,
        80,
        131,
        130,
        1,
        53,
        91,
        96,
        0,
        25,
        96,
        3,
        135,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        134,
        144,
        27,
        23,
        131,
        85,
        97,
        4,
        229,
        86,
        91,
        96,
        0,
        131,
        129,
        82,
        96,
        32,
        144,
        32,
        96,
        31,
        25,
        134,
        22,
        144,
        131,
        91,
        130,
        129,
        16,
        21,
        97,
        4,
        188,
        87,
        134,
        133,
        1,
        53,
        130,
        85,
        96,
        32,
        148,
        133,
        1,
        148,
        96,
        1,
        144,
        146,
        1,
        145,
        1,
        97,
        4,
        156,
        86,
        91,
        80,
        134,
        130,
        16,
        21,
        97,
        4,
        217,
        87,
        96,
        0,
        25,
        96,
        248,
        136,
        96,
        3,
        27,
        22,
        28,
        25,
        132,
        135,
        1,
        53,
        22,
        129,
        85,
        91,
        80,
        80,
        96,
        1,
        133,
        96,
        1,
        27,
        1,
        131,
        85,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        129,
        82,
        96,
        0,
        97,
        5,
        0,
        96,
        64,
        131,
        1,
        133,
        135,
        97,
        3,
        107,
        86,
        91,
        96,
        32,
        131,
        130,
        3,
        129,
        133,
        1,
        82,
        96,
        0,
        133,
        84,
        97,
        5,
        22,
        129,
        97,
        3,
        49,
        86,
        91,
        128,
        133,
        82,
        96,
        1,
        130,
        129,
        22,
        128,
        21,
        97,
        5,
        49,
        87,
        96,
        1,
        129,
        20,
        97,
        5,
        75,
        87,
        97,
        5,
        121,
        86,
        91,
        96,
        255,
        25,
        132,
        22,
        135,
        135,
        1,
        82,
        130,
        21,
        21,
        96,
        5,
        27,
        135,
        1,
        134,
        1,
        148,
        80,
        97,
        5,
        121,
        86,
        91,
        137,
        96,
        0,
        82,
        133,
        96,
        0,
        32,
        96,
        0,
        91,
        132,
        129,
        16,
        21,
        97,
        5,
        113,
        87,
        129,
        84,
        137,
        130,
        1,
        137,
        1,
        82,
        144,
        131,
        1,
        144,
        135,
        1,
        97,
        5,
        86,
        86,
        91,
        136,
        1,
        135,
        1,
        149,
        80,
        80,
        91,
        80,
        146,
        154,
        153,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        141,
        219,
        211,
        206,
        255,
        44,
        19,
        70,
        181,
        209,
        195,
        164,
        10,
        139,
        154,
        180,
        243,
        159,
        164,
        214,
        29,
        227,
        205,
        24,
        198,
        20,
        220,
        155,
        91,
        44,
        83,
        179,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static PERMISSIONGRAPH_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct PermissionGraph<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PermissionGraph<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PermissionGraph<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PermissionGraph<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PermissionGraph<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(PermissionGraph))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PermissionGraph<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                PERMISSIONGRAPH_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PERMISSIONGRAPH_ABI.clone(),
                PERMISSIONGRAPH_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `PermissionGraphIPFSPointer` (0xecaa133f) function
        pub fn permission_graph_ipfs_pointer(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([236, 170, 19, 63], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLatestPermissionGraphIPFSPointer` (0x20755771) function
        pub fn get_latest_permission_graph_ipfs_pointer(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([32, 117, 87, 113], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `proposePermissionGraphChange` (0x9f9fe1ba) function
        pub fn propose_permission_graph_change(
            &self,
            organisation_name: ::std::string::String,
            permission_graph_ipfs_pointer: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [159, 159, 225, 186],
                    (organisation_name, permission_graph_ipfs_pointer),
                )
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `PermissionGraphChangeRequest` event
        pub fn permission_graph_change_request_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PermissionGraphChangeRequestFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `PermissionGraphUpdated` event
        pub fn permission_graph_updated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, PermissionGraphUpdatedFilter>
        {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, PermissionGraphEvents>
        {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for PermissionGraph<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "PermissionGraphChangeRequest",
        abi = "PermissionGraphChangeRequest(string,string)"
    )]
    pub struct PermissionGraphChangeRequestFilter {
        pub organisation_name: ::std::string::String,
        pub permission_graph_ipfs_pointer: ::std::string::String,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "PermissionGraphUpdated",
        abi = "PermissionGraphUpdated(string,string)"
    )]
    pub struct PermissionGraphUpdatedFilter {
        pub organisation_name: ::std::string::String,
        pub permission_graph_ipfs_pointer: ::std::string::String,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PermissionGraphEvents {
        PermissionGraphChangeRequestFilter(PermissionGraphChangeRequestFilter),
        PermissionGraphUpdatedFilter(PermissionGraphUpdatedFilter),
    }
    impl ::ethers::contract::EthLogDecode for PermissionGraphEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = PermissionGraphChangeRequestFilter::decode_log(log) {
                return Ok(PermissionGraphEvents::PermissionGraphChangeRequestFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = PermissionGraphUpdatedFilter::decode_log(log) {
                return Ok(PermissionGraphEvents::PermissionGraphUpdatedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for PermissionGraphEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::PermissionGraphChangeRequestFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::PermissionGraphUpdatedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<PermissionGraphChangeRequestFilter> for PermissionGraphEvents {
        fn from(value: PermissionGraphChangeRequestFilter) -> Self {
            Self::PermissionGraphChangeRequestFilter(value)
        }
    }
    impl ::core::convert::From<PermissionGraphUpdatedFilter> for PermissionGraphEvents {
        fn from(value: PermissionGraphUpdatedFilter) -> Self {
            Self::PermissionGraphUpdatedFilter(value)
        }
    }
    ///Container type for all input parameters for the `PermissionGraphIPFSPointer` function with signature `PermissionGraphIPFSPointer()` and selector `0xecaa133f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "PermissionGraphIPFSPointer",
        abi = "PermissionGraphIPFSPointer()"
    )]
    pub struct PermissionGraphIPFSPointerCall;
    ///Container type for all input parameters for the `getLatestPermissionGraphIPFSPointer` function with signature `getLatestPermissionGraphIPFSPointer()` and selector `0x20755771`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "getLatestPermissionGraphIPFSPointer",
        abi = "getLatestPermissionGraphIPFSPointer()"
    )]
    pub struct GetLatestPermissionGraphIPFSPointerCall;
    ///Container type for all input parameters for the `proposePermissionGraphChange` function with signature `proposePermissionGraphChange(string,string)` and selector `0x9f9fe1ba`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "proposePermissionGraphChange",
        abi = "proposePermissionGraphChange(string,string)"
    )]
    pub struct ProposePermissionGraphChangeCall {
        pub organisation_name: ::std::string::String,
        pub permission_graph_ipfs_pointer: ::std::string::String,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PermissionGraphCalls {
        PermissionGraphIPFSPointer(PermissionGraphIPFSPointerCall),
        GetLatestPermissionGraphIPFSPointer(GetLatestPermissionGraphIPFSPointerCall),
        ProposePermissionGraphChange(ProposePermissionGraphChangeCall),
    }
    impl ::ethers::core::abi::AbiDecode for PermissionGraphCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <PermissionGraphIPFSPointerCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::PermissionGraphIPFSPointer(decoded));
            }
            if let Ok(decoded) =
                <GetLatestPermissionGraphIPFSPointerCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                )
            {
                return Ok(Self::GetLatestPermissionGraphIPFSPointer(decoded));
            }
            if let Ok(decoded) =
                <ProposePermissionGraphChangeCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::ProposePermissionGraphChange(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PermissionGraphCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::PermissionGraphIPFSPointer(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetLatestPermissionGraphIPFSPointer(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ProposePermissionGraphChange(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for PermissionGraphCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::PermissionGraphIPFSPointer(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetLatestPermissionGraphIPFSPointer(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ProposePermissionGraphChange(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<PermissionGraphIPFSPointerCall> for PermissionGraphCalls {
        fn from(value: PermissionGraphIPFSPointerCall) -> Self {
            Self::PermissionGraphIPFSPointer(value)
        }
    }
    impl ::core::convert::From<GetLatestPermissionGraphIPFSPointerCall> for PermissionGraphCalls {
        fn from(value: GetLatestPermissionGraphIPFSPointerCall) -> Self {
            Self::GetLatestPermissionGraphIPFSPointer(value)
        }
    }
    impl ::core::convert::From<ProposePermissionGraphChangeCall> for PermissionGraphCalls {
        fn from(value: ProposePermissionGraphChangeCall) -> Self {
            Self::ProposePermissionGraphChange(value)
        }
    }
    ///Container type for all return fields from the `PermissionGraphIPFSPointer` function with signature `PermissionGraphIPFSPointer()` and selector `0xecaa133f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct PermissionGraphIPFSPointerReturn(pub ::std::string::String);
    ///Container type for all return fields from the `getLatestPermissionGraphIPFSPointer` function with signature `getLatestPermissionGraphIPFSPointer()` and selector `0x20755771`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetLatestPermissionGraphIPFSPointerReturn(pub ::std::string::String);
}
