pub use permission_verifier_oracle::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod permission_verifier_oracle {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PermissionGraphChangeValidated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"contract PeerSetSmartContractAPI\",\"name\":\"peerSetSmartContract\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"proposedGraphIPFSPointer\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"PermissionGraphValidationRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"requests\",\"outputs\":[{\"internalType\":\"contract PeerSetSmartContractAPI\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"submitPeerValidation\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposedGraphIPFSPointer\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"validatePermissionGraphChange\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static PERMISSIONVERIFIERORACLE_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        4,
        219,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        14,
        185,
        49,
        37,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        146,
        91,
        124,
        165,
        20,
        97,
        0,
        91,
        87,
        128,
        99,
        157,
        134,
        105,
        133,
        20,
        97,
        0,
        129,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        89,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        3,
        111,
        86,
        91,
        97,
        0,
        194,
        86,
        91,
        0,
        91,
        97,
        0,
        110,
        97,
        0,
        105,
        54,
        96,
        4,
        97,
        3,
        159,
        86,
        91,
        97,
        2,
        186,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        170,
        97,
        0,
        143,
        54,
        96,
        4,
        97,
        4,
        17,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        120,
        86,
        91,
        96,
        0,
        130,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        128,
        97,
        1,
        37,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        22,
        96,
        36,
        130,
        1,
        82,
        117,
        20,
        153,
        92,
        93,
        89,
        92,
        221,
        18,
        89,
        8,
        26,
        92,
        200,
        27,
        155,
        221,
        8,
        29,
        152,
        91,
        26,
        89,
        96,
        82,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        7,
        200,
        153,
        239,
        96,
        227,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        62,
        68,
        207,
        120,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        108,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        144,
        145,
        144,
        97,
        4,
        42,
        86,
        91,
        97,
        1,
        245,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        48,
        96,
        36,
        130,
        1,
        82,
        127,
        111,
        110,
        108,
        121,
        32,
        97,
        32,
        112,
        101,
        101,
        114,
        32,
        99,
        97,
        110,
        32,
        118,
        97,
        108,
        105,
        100,
        97,
        116,
        101,
        32,
        112,
        101,
        114,
        109,
        105,
        115,
        115,
        96,
        68,
        130,
        1,
        82,
        111,
        105,
        111,
        110,
        32,
        103,
        114,
        97,
        112,
        104,
        32,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        128,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        1,
        28,
        86,
        91,
        96,
        64,
        128,
        81,
        133,
        129,
        82,
        132,
        21,
        21,
        96,
        32,
        130,
        1,
        82,
        127,
        98,
        146,
        165,
        251,
        77,
        239,
        219,
        242,
        43,
        144,
        236,
        157,
        149,
        119,
        227,
        177,
        110,
        140,
        128,
        57,
        136,
        76,
        252,
        36,
        153,
        138,
        51,
        7,
        84,
        174,
        221,
        115,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        64,
        81,
        99,
        36,
        12,
        237,
        225,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        133,
        144,
        82,
        131,
        21,
        21,
        96,
        36,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        68,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        36,
        12,
        237,
        225,
        144,
        96,
        100,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        129,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        149,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        96,
        0,
        148,
        133,
        82,
        80,
        80,
        80,
        96,
        32,
        130,
        144,
        82,
        80,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        128,
        51,
        144,
        80,
        96,
        0,
        132,
        132,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        213,
        146,
        145,
        144,
        97,
        4,
        78,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        127,
        125,
        36,
        208,
        53,
        30,
        168,
        55,
        90,
        131,
        25,
        168,
        166,
        104,
        9,
        135,
        211,
        39,
        166,
        107,
        153,
        248,
        176,
        94,
        86,
        200,
        220,
        12,
        82,
        207,
        51,
        101,
        28,
        129,
        131,
        135,
        135,
        96,
        64,
        81,
        97,
        3,
        34,
        148,
        147,
        146,
        145,
        144,
        97,
        4,
        94,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        144,
        145,
        85,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        3,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        130,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        3,
        148,
        129,
        97,
        3,
        94,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        3,
        202,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        222,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        3,
        237,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        3,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        71,
        129,
        97,
        3,
        94,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        130,
        55,
        96,
        0,
        145,
        1,
        144,
        129,
        82,
        145,
        144,
        80,
        86,
        91,
        132,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        96,
        96,
        64,
        130,
        1,
        129,
        144,
        82,
        129,
        1,
        130,
        144,
        82,
        129,
        131,
        96,
        128,
        131,
        1,
        55,
        96,
        0,
        129,
        131,
        1,
        96,
        128,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        146,
        1,
        96,
        31,
        25,
        22,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        70,
        49,
        201,
        223,
        25,
        99,
        235,
        130,
        231,
        226,
        216,
        62,
        161,
        78,
        250,
        41,
        66,
        234,
        67,
        134,
        223,
        92,
        246,
        24,
        191,
        244,
        164,
        191,
        97,
        111,
        34,
        156,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static PERMISSIONVERIFIERORACLE_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        65,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        14,
        185,
        49,
        37,
        20,
        97,
        0,
        70,
        87,
        128,
        99,
        146,
        91,
        124,
        165,
        20,
        97,
        0,
        91,
        87,
        128,
        99,
        157,
        134,
        105,
        133,
        20,
        97,
        0,
        129,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        89,
        97,
        0,
        84,
        54,
        96,
        4,
        97,
        3,
        111,
        86,
        91,
        97,
        0,
        194,
        86,
        91,
        0,
        91,
        97,
        0,
        110,
        97,
        0,
        105,
        54,
        96,
        4,
        97,
        3,
        159,
        86,
        91,
        97,
        2,
        186,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        170,
        97,
        0,
        143,
        54,
        96,
        4,
        97,
        4,
        17,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        120,
        86,
        91,
        96,
        0,
        130,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        128,
        97,
        1,
        37,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        22,
        96,
        36,
        130,
        1,
        82,
        117,
        20,
        153,
        92,
        93,
        89,
        92,
        221,
        18,
        89,
        8,
        26,
        92,
        200,
        27,
        155,
        221,
        8,
        29,
        152,
        91,
        26,
        89,
        96,
        82,
        27,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        7,
        200,
        153,
        239,
        96,
        227,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        99,
        62,
        68,
        207,
        120,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        1,
        108,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        1,
        144,
        145,
        144,
        97,
        4,
        42,
        86,
        91,
        97,
        1,
        245,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        48,
        96,
        36,
        130,
        1,
        82,
        127,
        111,
        110,
        108,
        121,
        32,
        97,
        32,
        112,
        101,
        101,
        114,
        32,
        99,
        97,
        110,
        32,
        118,
        97,
        108,
        105,
        100,
        97,
        116,
        101,
        32,
        112,
        101,
        114,
        109,
        105,
        115,
        115,
        96,
        68,
        130,
        1,
        82,
        111,
        105,
        111,
        110,
        32,
        103,
        114,
        97,
        112,
        104,
        32,
        99,
        104,
        97,
        110,
        103,
        101,
        96,
        128,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        1,
        28,
        86,
        91,
        96,
        64,
        128,
        81,
        133,
        129,
        82,
        132,
        21,
        21,
        96,
        32,
        130,
        1,
        82,
        127,
        98,
        146,
        165,
        251,
        77,
        239,
        219,
        242,
        43,
        144,
        236,
        157,
        149,
        119,
        227,
        177,
        110,
        140,
        128,
        57,
        136,
        76,
        252,
        36,
        153,
        138,
        51,
        7,
        84,
        174,
        221,
        115,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        64,
        81,
        99,
        36,
        12,
        237,
        225,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        133,
        144,
        82,
        131,
        21,
        21,
        96,
        36,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        68,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        36,
        12,
        237,
        225,
        144,
        96,
        100,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        129,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        149,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        96,
        0,
        148,
        133,
        82,
        80,
        80,
        80,
        96,
        32,
        130,
        144,
        82,
        80,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        86,
        91,
        96,
        0,
        128,
        51,
        144,
        80,
        96,
        0,
        132,
        132,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        2,
        213,
        146,
        145,
        144,
        97,
        4,
        78,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        127,
        125,
        36,
        208,
        53,
        30,
        168,
        55,
        90,
        131,
        25,
        168,
        166,
        104,
        9,
        135,
        211,
        39,
        166,
        107,
        153,
        248,
        176,
        94,
        86,
        200,
        220,
        12,
        82,
        207,
        51,
        101,
        28,
        129,
        131,
        135,
        135,
        96,
        64,
        81,
        97,
        3,
        34,
        148,
        147,
        146,
        145,
        144,
        97,
        4,
        94,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        144,
        32,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        144,
        145,
        85,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        3,
        108,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        130,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        3,
        148,
        129,
        97,
        3,
        94,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        3,
        178,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        3,
        202,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        133,
        1,
        145,
        80,
        133,
        96,
        31,
        131,
        1,
        18,
        97,
        3,
        222,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        3,
        237,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        3,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        146,
        144,
        146,
        1,
        150,
        145,
        149,
        80,
        144,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        71,
        129,
        97,
        3,
        94,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        131,
        130,
        55,
        96,
        0,
        145,
        1,
        144,
        129,
        82,
        145,
        144,
        80,
        86,
        91,
        132,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        96,
        96,
        64,
        130,
        1,
        129,
        144,
        82,
        129,
        1,
        130,
        144,
        82,
        129,
        131,
        96,
        128,
        131,
        1,
        55,
        96,
        0,
        129,
        131,
        1,
        96,
        128,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        146,
        1,
        96,
        31,
        25,
        22,
        1,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        70,
        49,
        201,
        223,
        25,
        99,
        235,
        130,
        231,
        226,
        216,
        62,
        161,
        78,
        250,
        41,
        66,
        234,
        67,
        134,
        223,
        92,
        246,
        24,
        191,
        244,
        164,
        191,
        97,
        111,
        34,
        156,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static PERMISSIONVERIFIERORACLE_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct PermissionVerifierOracle<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for PermissionVerifierOracle<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for PermissionVerifierOracle<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for PermissionVerifierOracle<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for PermissionVerifierOracle<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(PermissionVerifierOracle))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> PermissionVerifierOracle<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                PERMISSIONVERIFIERORACLE_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PERMISSIONVERIFIERORACLE_ABI.clone(),
                PERMISSIONVERIFIERORACLE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `requests` (0x9d866985) function
        pub fn requests(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([157, 134, 105, 133], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `submitPeerValidation` (0x0eb93125) function
        pub fn submit_peer_validation(
            &self,
            request_id: [u8; 32],
            result: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([14, 185, 49, 37], (request_id, result))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `validatePermissionGraphChange` (0x925b7ca5) function
        pub fn validate_permission_graph_change(
            &self,
            proposed_graph_ipfs_pointer: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([146, 91, 124, 165], proposed_graph_ipfs_pointer)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `PermissionGraphChangeValidated` event
        pub fn permission_graph_change_validated_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PermissionGraphChangeValidatedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `PermissionGraphValidationRequested` event
        pub fn permission_graph_validation_requested_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PermissionGraphValidationRequestedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            PermissionVerifierOracleEvents,
        > {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for PermissionVerifierOracle<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "PermissionGraphChangeValidated",
        abi = "PermissionGraphChangeValidated(bytes32,bool)"
    )]
    pub struct PermissionGraphChangeValidatedFilter {
        pub request_id: [u8; 32],
        pub valid: bool,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(
        name = "PermissionGraphValidationRequested",
        abi = "PermissionGraphValidationRequested(bytes32,address,string)"
    )]
    pub struct PermissionGraphValidationRequestedFilter {
        pub request_id: [u8; 32],
        pub peer_set_smart_contract: ::ethers::core::types::Address,
        pub proposed_graph_ipfs_pointer: ::std::string::String,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PermissionVerifierOracleEvents {
        PermissionGraphChangeValidatedFilter(PermissionGraphChangeValidatedFilter),
        PermissionGraphValidationRequestedFilter(PermissionGraphValidationRequestedFilter),
    }
    impl ::ethers::contract::EthLogDecode for PermissionVerifierOracleEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = PermissionGraphChangeValidatedFilter::decode_log(log) {
                return Ok(
                    PermissionVerifierOracleEvents::PermissionGraphChangeValidatedFilter(decoded),
                );
            }
            if let Ok(decoded) = PermissionGraphValidationRequestedFilter::decode_log(log) {
                return Ok(
                    PermissionVerifierOracleEvents::PermissionGraphValidationRequestedFilter(
                        decoded,
                    ),
                );
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for PermissionVerifierOracleEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::PermissionGraphChangeValidatedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::PermissionGraphValidationRequestedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<PermissionGraphChangeValidatedFilter>
        for PermissionVerifierOracleEvents
    {
        fn from(value: PermissionGraphChangeValidatedFilter) -> Self {
            Self::PermissionGraphChangeValidatedFilter(value)
        }
    }
    impl ::core::convert::From<PermissionGraphValidationRequestedFilter>
        for PermissionVerifierOracleEvents
    {
        fn from(value: PermissionGraphValidationRequestedFilter) -> Self {
            Self::PermissionGraphValidationRequestedFilter(value)
        }
    }
    ///Container type for all input parameters for the `requests` function with signature `requests(bytes32)` and selector `0x9d866985`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "requests", abi = "requests(bytes32)")]
    pub struct RequestsCall(pub [u8; 32]);
    ///Container type for all input parameters for the `submitPeerValidation` function with signature `submitPeerValidation(bytes32,bool)` and selector `0x0eb93125`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "submitPeerValidation",
        abi = "submitPeerValidation(bytes32,bool)"
    )]
    pub struct SubmitPeerValidationCall {
        pub request_id: [u8; 32],
        pub result: bool,
    }
    ///Container type for all input parameters for the `validatePermissionGraphChange` function with signature `validatePermissionGraphChange(string)` and selector `0x925b7ca5`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "validatePermissionGraphChange",
        abi = "validatePermissionGraphChange(string)"
    )]
    pub struct ValidatePermissionGraphChangeCall {
        pub proposed_graph_ipfs_pointer: ::std::string::String,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum PermissionVerifierOracleCalls {
        Requests(RequestsCall),
        SubmitPeerValidation(SubmitPeerValidationCall),
        ValidatePermissionGraphChange(ValidatePermissionGraphChangeCall),
    }
    impl ::ethers::core::abi::AbiDecode for PermissionVerifierOracleCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <RequestsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Requests(decoded));
            }
            if let Ok(decoded) =
                <SubmitPeerValidationCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::SubmitPeerValidation(decoded));
            }
            if let Ok(decoded) =
                <ValidatePermissionGraphChangeCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::ValidatePermissionGraphChange(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for PermissionVerifierOracleCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Requests(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SubmitPeerValidation(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ValidatePermissionGraphChange(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for PermissionVerifierOracleCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Requests(element) => ::core::fmt::Display::fmt(element, f),
                Self::SubmitPeerValidation(element) => ::core::fmt::Display::fmt(element, f),
                Self::ValidatePermissionGraphChange(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<RequestsCall> for PermissionVerifierOracleCalls {
        fn from(value: RequestsCall) -> Self {
            Self::Requests(value)
        }
    }
    impl ::core::convert::From<SubmitPeerValidationCall> for PermissionVerifierOracleCalls {
        fn from(value: SubmitPeerValidationCall) -> Self {
            Self::SubmitPeerValidation(value)
        }
    }
    impl ::core::convert::From<ValidatePermissionGraphChangeCall> for PermissionVerifierOracleCalls {
        fn from(value: ValidatePermissionGraphChangeCall) -> Self {
            Self::ValidatePermissionGraphChange(value)
        }
    }
    ///Container type for all return fields from the `requests` function with signature `requests(bytes32)` and selector `0x9d866985`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct RequestsReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `validatePermissionGraphChange` function with signature `validatePermissionGraphChange(string)` and selector `0x925b7ca5`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct ValidatePermissionGraphChangeReturn(pub [u8; 32]);
}
